// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/service.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_user_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_user_2eproto;
namespace mprpc {
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginRespone;
struct LoginResponeDefaultTypeInternal;
extern LoginResponeDefaultTypeInternal _LoginRespone_default_instance_;
class SayHelloRequest;
struct SayHelloRequestDefaultTypeInternal;
extern SayHelloRequestDefaultTypeInternal _SayHelloRequest_default_instance_;
class SayHelloRespone;
struct SayHelloResponeDefaultTypeInternal;
extern SayHelloResponeDefaultTypeInternal _SayHelloRespone_default_instance_;
}  // namespace mprpc
namespace google {
namespace protobuf {
template <>
::mprpc::LoginRequest* Arena::CreateMaybeMessage<::mprpc::LoginRequest>(Arena*);
template <>
::mprpc::LoginRespone* Arena::CreateMaybeMessage<::mprpc::LoginRespone>(Arena*);
template <>
::mprpc::SayHelloRequest* Arena::CreateMaybeMessage<::mprpc::SayHelloRequest>(Arena*);
template <>
::mprpc::SayHelloRespone* Arena::CreateMaybeMessage<::mprpc::SayHelloRespone>(Arena*);
}  // namespace protobuf
}  // namespace google

namespace mprpc {

// ===================================================================


// -------------------------------------------------------------------

class LoginRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mprpc.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LoginRequest(::google::protobuf::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LoginRequest& from) {
    LoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mprpc.LoginRequest";
  }
  protected:
  explicit LoginRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswdFieldNumber = 2,
  };
  // bytes username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // bytes passwd = 2;
  void clear_passwd() ;
  const std::string& passwd() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_passwd(Arg_&& arg, Args_... args);
  std::string* mutable_passwd();
  PROTOBUF_NODISCARD std::string* release_passwd();
  void set_allocated_passwd(std::string* ptr);

  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(
      const std::string& value);
  std::string* _internal_mutable_passwd();

  public:
  // @@protoc_insertion_point(class_scope:mprpc.LoginRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr passwd_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};// -------------------------------------------------------------------

class LoginRespone final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mprpc.LoginRespone) */ {
 public:
  inline LoginRespone() : LoginRespone(nullptr) {}
  ~LoginRespone() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LoginRespone(::google::protobuf::internal::ConstantInitialized);

  LoginRespone(const LoginRespone& from);
  LoginRespone(LoginRespone&& from) noexcept
    : LoginRespone() {
    *this = ::std::move(from);
  }

  inline LoginRespone& operator=(const LoginRespone& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRespone& operator=(LoginRespone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRespone& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRespone* internal_default_instance() {
    return reinterpret_cast<const LoginRespone*>(
               &_LoginRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginRespone& a, LoginRespone& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRespone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRespone* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRespone* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRespone>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginRespone& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LoginRespone& from) {
    LoginRespone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRespone* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mprpc.LoginRespone";
  }
  protected:
  explicit LoginRespone(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // bytes msg = 2;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // int32 status = 1;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mprpc.LoginRespone)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::int32_t status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};// -------------------------------------------------------------------

class SayHelloRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mprpc.SayHelloRequest) */ {
 public:
  inline SayHelloRequest() : SayHelloRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SayHelloRequest(::google::protobuf::internal::ConstantInitialized);

  SayHelloRequest(const SayHelloRequest& from);
  SayHelloRequest(SayHelloRequest&& from) noexcept
    : SayHelloRequest() {
    *this = ::std::move(from);
  }

  inline SayHelloRequest& operator=(const SayHelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SayHelloRequest& operator=(SayHelloRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SayHelloRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SayHelloRequest* internal_default_instance() {
    return reinterpret_cast<const SayHelloRequest*>(
               &_SayHelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SayHelloRequest& a, SayHelloRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SayHelloRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SayHelloRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SayHelloRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SayHelloRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SayHelloRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SayHelloRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mprpc.SayHelloRequest";
  }
  protected:
  explicit SayHelloRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mprpc.SayHelloRequest)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  friend struct ::TableStruct_user_2eproto;
};// -------------------------------------------------------------------

class SayHelloRespone final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mprpc.SayHelloRespone) */ {
 public:
  inline SayHelloRespone() : SayHelloRespone(nullptr) {}
  ~SayHelloRespone() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SayHelloRespone(::google::protobuf::internal::ConstantInitialized);

  SayHelloRespone(const SayHelloRespone& from);
  SayHelloRespone(SayHelloRespone&& from) noexcept
    : SayHelloRespone() {
    *this = ::std::move(from);
  }

  inline SayHelloRespone& operator=(const SayHelloRespone& from) {
    CopyFrom(from);
    return *this;
  }
  inline SayHelloRespone& operator=(SayHelloRespone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SayHelloRespone& default_instance() {
    return *internal_default_instance();
  }
  static inline const SayHelloRespone* internal_default_instance() {
    return reinterpret_cast<const SayHelloRespone*>(
               &_SayHelloRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SayHelloRespone& a, SayHelloRespone& b) {
    a.Swap(&b);
  }
  inline void Swap(SayHelloRespone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SayHelloRespone* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SayHelloRespone* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SayHelloRespone>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SayHelloRespone& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SayHelloRespone& from) {
    SayHelloRespone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SayHelloRespone* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mprpc.SayHelloRespone";
  }
  protected:
  explicit SayHelloRespone(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // bytes msg = 1;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:mprpc.SayHelloRespone)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};

// ===================================================================


// -------------------------------------------------------------------

class UserServer_Stub;
class UserServer : public ::google::protobuf::Service {
 protected:
  UserServer() = default;

 public:
  using Stub = UserServer_Stub;

  UserServer(const UserServer&) = delete;
  UserServer& operator=(const UserServer&) = delete;
  virtual ~UserServer() = default;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Login(::google::protobuf::RpcController* controller,
                        const ::mprpc::LoginRequest* request,
                        ::mprpc::LoginRespone* response,
                        ::google::protobuf::Closure* done);
  virtual void SayHello(::google::protobuf::RpcController* controller,
                        const ::mprpc::SayHelloRequest* request,
                        ::mprpc::SayHelloRespone* response,
                        ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------
  const ::google::protobuf::ServiceDescriptor* GetDescriptor() override;

  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done) override;

  const ::google::protobuf::Message& GetRequestPrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;

  const ::google::protobuf::Message& GetResponsePrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;
};

class UserServer_Stub final : public UserServer {
 public:
  UserServer_Stub(::google::protobuf::RpcChannel* channel);
  UserServer_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);

  UserServer_Stub(const UserServer_Stub&) = delete;
  UserServer_Stub& operator=(const UserServer_Stub&) = delete;

  ~UserServer_Stub() override;

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements UserServer ------------------------------------------
  void Login(::google::protobuf::RpcController* controller,
                        const ::mprpc::LoginRequest* request,
                        ::mprpc::LoginRespone* response,
                        ::google::protobuf::Closure* done) override;
  void SayHello(::google::protobuf::RpcController* controller,
                        const ::mprpc::SayHelloRequest* request,
                        ::mprpc::SayHelloRespone* response,
                        ::google::protobuf::Closure* done) override;

 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
};
// ===================================================================



// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LoginRequest

// bytes username = 1;
inline void LoginRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:mprpc.LoginRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.username_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.LoginRequest.username)
}
inline std::string* LoginRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:mprpc.LoginRequest.username)
  return _s;
}
inline const std::string& LoginRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void LoginRequest::_internal_set_username(const std::string& value) {
  ;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_username() {
  ;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:mprpc.LoginRequest.username)
  return _impl_.username_.Release();
}
inline void LoginRequest::set_allocated_username(std::string* value) {
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.LoginRequest.username)
}

// bytes passwd = 2;
inline void LoginRequest::clear_passwd() {
  _impl_.passwd_.ClearToEmpty();
}
inline const std::string& LoginRequest::passwd() const {
  // @@protoc_insertion_point(field_get:mprpc.LoginRequest.passwd)
  return _internal_passwd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_passwd(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.passwd_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.LoginRequest.passwd)
}
inline std::string* LoginRequest::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:mprpc.LoginRequest.passwd)
  return _s;
}
inline const std::string& LoginRequest::_internal_passwd() const {
  return _impl_.passwd_.Get();
}
inline void LoginRequest::_internal_set_passwd(const std::string& value) {
  ;
  _impl_.passwd_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_passwd() {
  ;
  return _impl_.passwd_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:mprpc.LoginRequest.passwd)
  return _impl_.passwd_.Release();
}
inline void LoginRequest::set_allocated_passwd(std::string* value) {
  _impl_.passwd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.passwd_.IsDefault()) {
          _impl_.passwd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.LoginRequest.passwd)
}

// -------------------------------------------------------------------

// LoginRespone

// int32 status = 1;
inline void LoginRespone::clear_status() {
  _impl_.status_ = 0;
}
inline ::int32_t LoginRespone::status() const {
  // @@protoc_insertion_point(field_get:mprpc.LoginRespone.status)
  return _internal_status();
}
inline void LoginRespone::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mprpc.LoginRespone.status)
}
inline ::int32_t LoginRespone::_internal_status() const {
  return _impl_.status_;
}
inline void LoginRespone::_internal_set_status(::int32_t value) {
  ;
  _impl_.status_ = value;
}

// bytes msg = 2;
inline void LoginRespone::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& LoginRespone::msg() const {
  // @@protoc_insertion_point(field_get:mprpc.LoginRespone.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRespone::set_msg(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.msg_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.LoginRespone.msg)
}
inline std::string* LoginRespone::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:mprpc.LoginRespone.msg)
  return _s;
}
inline const std::string& LoginRespone::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void LoginRespone::_internal_set_msg(const std::string& value) {
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRespone::_internal_mutable_msg() {
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginRespone::release_msg() {
  // @@protoc_insertion_point(field_release:mprpc.LoginRespone.msg)
  return _impl_.msg_.Release();
}
inline void LoginRespone::set_allocated_msg(std::string* value) {
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.LoginRespone.msg)
}

// -------------------------------------------------------------------

// SayHelloRequest

// -------------------------------------------------------------------

// SayHelloRespone

// bytes msg = 1;
inline void SayHelloRespone::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& SayHelloRespone::msg() const {
  // @@protoc_insertion_point(field_get:mprpc.SayHelloRespone.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SayHelloRespone::set_msg(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.msg_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.SayHelloRespone.msg)
}
inline std::string* SayHelloRespone::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:mprpc.SayHelloRespone.msg)
  return _s;
}
inline const std::string& SayHelloRespone::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void SayHelloRespone::_internal_set_msg(const std::string& value) {
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* SayHelloRespone::_internal_mutable_msg() {
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* SayHelloRespone::release_msg() {
  // @@protoc_insertion_point(field_release:mprpc.SayHelloRespone.msg)
  return _impl_.msg_.Release();
}
inline void SayHelloRespone::set_allocated_msg(std::string* value) {
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.SayHelloRespone.msg)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mprpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_user_2eproto_2epb_2eh
